#! /bin/bash

# Support archlinux rolling upgrade.

# The Steam client is known to call this script with the following parameter combinations:
# steamos-update --supports-duplicate-detection     -- should do nothing
# steamos-update --enable-duplicate-detection check -- should check for update
# steamos-update check                              -- should check for update
# steamos-update --enable-duplicate-detection       -- should perform an update
# steamos-update                                    -- should perform an update


while [[ $# -gt 0 ]]; do
  case $1 in
    check)
      CHECK=1
      shift
      ;;
    --supports-duplicate-detection)
      EXIT=1
      shift
      ;;
    *)
      shift
      ;;
  esac
done

function clean_progress {
  local scale=$1
  local postfix=$2
  local last_value=$scale
  while IFS= read -r line; do
    value=$(( ${line}*100/${scale} ))
    if [ "$last_value" != "$value" ]; then
      echo ${value}${postfix}
      last_value=$value
    fi
  done
}

function check_for_updates {
  if command -v frzr-deploy > /dev/null; then
    frzr-deploy --check
    if [ $? -eq 0 ]; then
      exit 0
    fi
  fi

  checkupdates
  if [ $? -eq 0 ]; then
    exit 7 # tells Steam client there is no update to perform
  else
    exit 0
  fi
}

function do_update {
  STATUS=7
  if command -v frzr-deploy > /dev/null; then
    frzr-deploy --steam-progress
    STATUS=$?
  fi

  if [ $? -eq 7 ]; then
    # pacman update
    set -o pipefail
    TOTAL=$(checkupdates | wc -l)
    if [ $? -ne 0 ]; then
        exit 7 # no update available
    fi
    pacman -Syu --noconfirm 2>&1 | grep --line-buffered -E 'downloading|upgrading' | awk '{print ++count;fflush()}' | clean_progress $((TOTAL * 2 + 3)) '%'
  fi
}

if command -v frzr-deploy > /dev/null; then
  if [ -n "$CHECK" ]; then
    check_for_updates
  elif [ -n "$EXIT" ]; then
    exit 0
  else
    do_update
  fi
else
    exit 7 # tells Steam client there is no update to perform
fi
